

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Oct  3 13:17:26 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 17/08/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0000                     	;# 
    50     0001                     	;# 
    51     0002                     	;# 
    52     0003                     	;# 
    53     0004                     	;# 
    54     0005                     	;# 
    55     0006                     	;# 
    56     0007                     	;# 
    57     0008                     	;# 
    58     0009                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000D                     	;# 
    63     000E                     	;# 
    64     000E                     	;# 
    65     000F                     	;# 
    66     0010                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0013                     	;# 
    70     0014                     	;# 
    71     0015                     	;# 
    72     0015                     	;# 
    73     0016                     	;# 
    74     0017                     	;# 
    75     0018                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001B                     	;# 
    80     001C                     	;# 
    81     001D                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     0081                     	;# 
    85     0085                     	;# 
    86     0086                     	;# 
    87     0087                     	;# 
    88     0088                     	;# 
    89     0089                     	;# 
    90     008C                     	;# 
    91     008D                     	;# 
    92     008E                     	;# 
    93     008F                     	;# 
    94     0090                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0093                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0095                     	;# 
   102     0096                     	;# 
   103     0097                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009A                     	;# 
   107     009B                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     0105                     	;# 
   113     0107                     	;# 
   114     0108                     	;# 
   115     0109                     	;# 
   116     010C                     	;# 
   117     010C                     	;# 
   118     010D                     	;# 
   119     010E                     	;# 
   120     010F                     	;# 
   121     0185                     	;# 
   122     0187                     	;# 
   123     0188                     	;# 
   124     0189                     	;# 
   125     018C                     	;# 
   126     018D                     	;# 
   127     0000                     	;# 
   128     0001                     	;# 
   129     0002                     	;# 
   130     0003                     	;# 
   131     0004                     	;# 
   132     0005                     	;# 
   133     0006                     	;# 
   134     0007                     	;# 
   135     0008                     	;# 
   136     0009                     	;# 
   137     000A                     	;# 
   138     000B                     	;# 
   139     000C                     	;# 
   140     000D                     	;# 
   141     000E                     	;# 
   142     000E                     	;# 
   143     000F                     	;# 
   144     0010                     	;# 
   145     0011                     	;# 
   146     0012                     	;# 
   147     0013                     	;# 
   148     0014                     	;# 
   149     0015                     	;# 
   150     0015                     	;# 
   151     0016                     	;# 
   152     0017                     	;# 
   153     0018                     	;# 
   154     0019                     	;# 
   155     001A                     	;# 
   156     001B                     	;# 
   157     001B                     	;# 
   158     001C                     	;# 
   159     001D                     	;# 
   160     001E                     	;# 
   161     001F                     	;# 
   162     0081                     	;# 
   163     0085                     	;# 
   164     0086                     	;# 
   165     0087                     	;# 
   166     0088                     	;# 
   167     0089                     	;# 
   168     008C                     	;# 
   169     008D                     	;# 
   170     008E                     	;# 
   171     008F                     	;# 
   172     0090                     	;# 
   173     0091                     	;# 
   174     0092                     	;# 
   175     0093                     	;# 
   176     0093                     	;# 
   177     0093                     	;# 
   178     0094                     	;# 
   179     0095                     	;# 
   180     0096                     	;# 
   181     0097                     	;# 
   182     0098                     	;# 
   183     0099                     	;# 
   184     009A                     	;# 
   185     009B                     	;# 
   186     009C                     	;# 
   187     009D                     	;# 
   188     009E                     	;# 
   189     009F                     	;# 
   190     0105                     	;# 
   191     0107                     	;# 
   192     0108                     	;# 
   193     0109                     	;# 
   194     010C                     	;# 
   195     010C                     	;# 
   196     010D                     	;# 
   197     010E                     	;# 
   198     010F                     	;# 
   199     0185                     	;# 
   200     0187                     	;# 
   201     0188                     	;# 
   202     0189                     	;# 
   203     018C                     	;# 
   204     018D                     	;# 
   205     0005                     _PORTA	set	5
   206     0006                     _PORTBbits	set	6
   207     008F                     _OSCCONbits	set	143
   208     0086                     _TRISBbits	set	134
   209     0085                     _TRISA	set	133
   210     0189                     _ANSELH	set	393
   211     0188                     _ANSEL	set	392
   212                           
   213                           	psect	cinit
   214     07FC                     start_initialization:	
   215                           ; #config settings
   216                           
   217     07FC                     __initialization:
   218     07FC                     end_of_initialization:	
   219                           ;End of C runtime variable initialization code
   220                           
   221     07FC                     __end_of__initialization:
   222     07FC  0183               	clrf	3
   223     07FD  120A  118A  2EF0   	ljmp	_main	;jump to C main() function
   224                           
   225                           	psect	cstackCOMMON
   226     0070                     __pcstackCOMMON:
   227     0070                     ?_pic_init:
   228     0070                     ??_pic_init:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0070                     ?_rotary_read:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ??_rotary_read:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_init_osc:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ??_init_osc:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_init_gpio:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ??_init_gpio:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254     0070                     	ds	5
   255     0075                     rotary_read@rotary:
   256                           
   257                           ; 1 bytes @ 0x5
   258     0075                     	ds	1
   259     0076                     ??_main:
   260                           
   261                           ; 1 bytes @ 0x6
   262     0076                     	ds	2
   263                           
   264                           	psect	cstackBANK0
   265     0020                     __pcstackBANK0:
   266     0020                     main@rotary:
   267                           
   268                           ; 8 bytes @ 0x0
   269     0020                     	ds	8
   270                           
   271                           	psect	maintext
   272     06F0                     __pmaintext:	
   273 ;;
   274 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   275 ;;
   276 ;; *************** function _main *****************
   277 ;; Defined at:
   278 ;;		line 52 in file "newmain.c"
   279 ;; Parameters:    Size  Location     Type
   280 ;;		None
   281 ;; Auto vars:     Size  Location     Type
   282 ;;  rotary          8    0[BANK0 ] struct _rot
   283 ;; Return value:  Size  Location     Type
   284 ;;                  1    wreg      void 
   285 ;; Registers used:
   286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : B00/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   292 ;;      Params:         0       0       0       0       0
   293 ;;      Locals:         0       8       0       0       0
   294 ;;      Temps:          2       0       0       0       0
   295 ;;      Totals:         2       8       0       0       0
   296 ;;Total ram usage:       10 bytes
   297 ;; Hardware stack levels required when called: 2
   298 ;; This function calls:
   299 ;;		_pic_init
   300 ;;		_rotary_read
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306     06F0                     _main:	
   307                           ;psect for function _main
   308                           
   309     06F0                     l701:	
   310                           ;incstack = 0
   311                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   312                           
   313                           
   314                           ;newmain.c: 54:     pic_init();
   315     06F0  120A  118A  26E1  120A  118A  	fcall	_pic_init
   316     06F5                     l703:
   317                           
   318                           ;newmain.c: 59:     rot rotary;;newmain.c: 60:     rotary.counter = 0;
   319     06F5  1283               	bcf	3,5	;RP0=0, select bank0
   320     06F6  1303               	bcf	3,6	;RP1=0, select bank0
   321     06F7  01A4               	clrf	main@rotary+4
   322     06F8  01A5               	clrf	main@rotary+5
   323     06F9                     l705:
   324                           
   325                           ;newmain.c: 61:     rotary.oddcounter = 0;
   326     06F9  01A6               	clrf	main@rotary+6
   327     06FA  01A7               	clrf	main@rotary+7
   328     06FB                     l707:
   329                           
   330                           ;newmain.c: 62:     rotary.oldstate = 0;
   331     06FB  01A0               	clrf	main@rotary
   332     06FC  01A1               	clrf	main@rotary+1
   333     06FD                     l709:
   334                           
   335                           ;newmain.c: 63:     rotary.state = 0;
   336     06FD  01A2               	clrf	main@rotary+2
   337     06FE  01A3               	clrf	main@rotary+3
   338     06FF                     l711:
   339                           
   340                           ;newmain.c: 65:     rotary.oldstate = PORTBbits.RB4;
   341     06FF  0E06               	swapf	6,w	;volatile
   342     0700  3901               	andlw	1
   343     0701  00F6               	movwf	??_main
   344     0702  01F7               	clrf	??_main+1
   345     0703  0876               	movf	??_main,w
   346     0704  00A0               	movwf	main@rotary
   347     0705  0877               	movf	??_main+1,w
   348     0706  00A1               	movwf	main@rotary+1
   349     0707                     l713:
   350                           
   351                           ;newmain.c: 67:         {;newmain.c: 68:         rotary.state = PORTBbits.RB4;
   352     0707  1283               	bcf	3,5	;RP0=0, select bank0
   353     0708  1303               	bcf	3,6	;RP1=0, select bank0
   354     0709  0E06               	swapf	6,w	;volatile
   355     070A  3901               	andlw	1
   356     070B  00F6               	movwf	??_main
   357     070C  01F7               	clrf	??_main+1
   358     070D  0876               	movf	??_main,w
   359     070E  00A2               	movwf	main@rotary+2
   360     070F  0877               	movf	??_main+1,w
   361     0710  00A3               	movwf	main@rotary+3
   362     0711                     l715:
   363                           
   364                           ;newmain.c: 69:         rotary_read(&rotary);
   365     0711  3020               	movlw	(low (main@rotary| 0))& (0+255)
   366     0712  120A  118A  275B  120A  118A  	fcall	_rotary_read
   367     0717                     l717:
   368                           
   369                           ;newmain.c: 70:         rotary.oldstate = rotary.state;
   370     0717  1283               	bcf	3,5	;RP0=0, select bank0
   371     0718  1303               	bcf	3,6	;RP1=0, select bank0
   372     0719  0823               	movf	main@rotary+3,w
   373     071A  00A1               	movwf	main@rotary+1
   374     071B  0822               	movf	main@rotary+2,w
   375     071C  00A0               	movwf	main@rotary
   376     071D                     l719:
   377                           
   378                           ;newmain.c: 71:         PORTA &= ~(1 << (rotary.oddcounter));
   379     071D  3001               	movlw	1
   380     071E  00F6               	movwf	??_main
   381     071F  0A26               	incf	main@rotary+6,w
   382     0720  2F23               	goto	u184
   383     0721                     u185:
   384     0721  1003               	clrc
   385     0722  0DF6               	rlf	??_main,f
   386     0723                     u184:
   387     0723  3EFF               	addlw	-1
   388     0724  1D03               	skipz
   389     0725  2F21               	goto	u185
   390     0726  0876               	movf	??_main,w
   391     0727  3AFF               	xorlw	255
   392     0728  00F7               	movwf	??_main+1
   393     0729  0877               	movf	??_main+1,w
   394     072A  0585               	andwf	5,f	;volatile
   395     072B                     l721:
   396                           
   397                           ;newmain.c: 72:         _delay((unsigned long)((1)*(500000/4000.0)));
   398     072B  3029               	movlw	41
   399     072C  00F6               	movwf	??_main
   400     072D                     u217:
   401     072D  0BF6               	decfsz	??_main,f
   402     072E  2F2D               	goto	u217
   403     072F  0000               	nop
   404     0730                     l723:
   405                           
   406                           ;newmain.c: 73:         PORTA |= (1 << (rotary.oddcounter));
   407     0730  3001               	movlw	1
   408     0731  00F6               	movwf	??_main
   409     0732  1283               	bcf	3,5	;RP0=0, select bank0
   410     0733  1303               	bcf	3,6	;RP1=0, select bank0
   411     0734  0A26               	incf	main@rotary+6,w
   412     0735  2F38               	goto	u194
   413     0736                     u195:
   414     0736  1003               	clrc
   415     0737  0DF6               	rlf	??_main,f
   416     0738                     u194:
   417     0738  3EFF               	addlw	-1
   418     0739  1D03               	skipz
   419     073A  2F36               	goto	u195
   420     073B  0876               	movf	??_main,w
   421     073C  00F7               	movwf	??_main+1
   422     073D  0877               	movf	??_main+1,w
   423     073E  0485               	iorwf	5,f	;volatile
   424     073F                     l725:
   425                           
   426                           ;newmain.c: 74:         _delay((unsigned long)((1)*(500000/4000.0)));
   427     073F  3029               	movlw	41
   428     0740  00F6               	movwf	??_main
   429     0741                     u227:
   430     0741  0BF6               	decfsz	??_main,f
   431     0742  2F41               	goto	u227
   432     0743  0000               	nop
   433     0744                     l727:
   434                           
   435                           ;newmain.c: 75:         if (rotary.oddcounter > (4 - 1))
   436     0744  1283               	bcf	3,5	;RP0=0, select bank0
   437     0745  1303               	bcf	3,6	;RP1=0, select bank0
   438     0746  0827               	movf	main@rotary+7,w
   439     0747  3A80               	xorlw	128
   440     0748  00FF               	movwf	btemp+1
   441     0749  3080               	movlw	128
   442     074A  027F               	subwf	btemp+1,w
   443     074B  1D03               	skipz
   444     074C  2F4F               	goto	u205
   445     074D  3004               	movlw	4
   446     074E  0226               	subwf	main@rotary+6,w
   447     074F                     u205:
   448     074F  1C03               	skipc
   449     0750  2F52               	goto	u201
   450     0751  2F53               	goto	u200
   451     0752                     u201:
   452     0752  2F07               	goto	l713
   453     0753                     u200:
   454     0753                     l729:
   455                           
   456                           ;newmain.c: 76:             {;newmain.c: 77:             rotary.oddcounter = 0;
   457     0753  1283               	bcf	3,5	;RP0=0, select bank0
   458     0754  1303               	bcf	3,6	;RP1=0, select bank0
   459     0755  01A6               	clrf	main@rotary+6
   460     0756  01A7               	clrf	main@rotary+7
   461     0757  2F07               	goto	l713
   462     0758  120A  118A  2800   	ljmp	start
   463     075B                     __end_of_main:
   464                           
   465                           	psect	text1
   466     075B                     __ptext1:	
   467 ;; *************** function _rotary_read *****************
   468 ;; Defined at:
   469 ;;		line 83 in file "newmain.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;  rotary          1    wreg     PTR struct _rot
   472 ;;		 -> main@rotary(8), 
   473 ;; Auto vars:     Size  Location     Type
   474 ;;  rotary          1    5[COMMON] PTR struct _rot
   475 ;;		 -> main@rotary(8), 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         1       0       0       0       0
   487 ;;      Temps:          5       0       0       0       0
   488 ;;      Totals:         6       0       0       0       0
   489 ;;Total ram usage:        6 bytes
   490 ;; Hardware stack levels used: 1
   491 ;; This function calls:
   492 ;;		Nothing
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498     075B                     _rotary_read:	
   499                           ;psect for function _rotary_read
   500                           
   501                           
   502                           ;incstack = 0
   503                           ; Regs used in _rotary_read: [wreg-fsr0h+status,2+status,0+btemp+1]
   504                           ;rotary_read@rotary stored from wreg
   505     075B  00F5               	movwf	rotary_read@rotary
   506     075C                     l681:
   507                           
   508                           ;newmain.c: 83: void rotary_read(rot *rotary);newmain.c: 84:     {;newmain.c: 87:     if
      +                           (rotary->state != rotary->oldstate)
   509     075C  0875               	movf	rotary_read@rotary,w
   510     075D  0084               	movwf	4
   511     075E  1383               	bcf	3,7	;select IRP bank0
   512     075F  0800               	movf	0,w
   513     0760  00F0               	movwf	??_rotary_read
   514     0761  0A84               	incf	4,f
   515     0762  0800               	movf	0,w
   516     0763  00F1               	movwf	??_rotary_read+1
   517     0764  0875               	movf	rotary_read@rotary,w
   518     0765  3E02               	addlw	2
   519     0766  0084               	movwf	4
   520     0767  0800               	movf	0,w
   521     0768  00F2               	movwf	??_rotary_read+2
   522     0769  0A84               	incf	4,f
   523     076A  0800               	movf	0,w
   524     076B  00F3               	movwf	??_rotary_read+3
   525     076C  0871               	movf	??_rotary_read+1,w
   526     076D  0673               	xorwf	??_rotary_read+3,w
   527     076E  1D03               	skipz
   528     076F  2F72               	goto	u125
   529     0770  0870               	movf	??_rotary_read,w
   530     0771  0672               	xorwf	??_rotary_read+2,w
   531     0772                     u125:
   532     0772  1903               	skipnz
   533     0773  2F75               	goto	u121
   534     0774  2F76               	goto	u120
   535     0775                     u121:
   536     0775  2FFB               	goto	l43
   537     0776                     u120:
   538     0776                     l683:
   539                           
   540                           ;newmain.c: 88:         {;newmain.c: 90:         if (PORTBbits.RB5 != rotary->state)
   541     0776  0875               	movf	rotary_read@rotary,w
   542     0777  3E02               	addlw	2
   543     0778  0084               	movwf	4
   544     0779  0800               	movf	0,w
   545     077A  00F0               	movwf	??_rotary_read
   546     077B  0A84               	incf	4,f
   547     077C  0800               	movf	0,w
   548     077D  00F1               	movwf	??_rotary_read+1
   549     077E  1283               	bcf	3,5	;RP0=0, select bank0
   550     077F  1303               	bcf	3,6	;RP1=0, select bank0
   551     0780  0E06               	swapf	6,w	;volatile
   552     0781  00F2               	movwf	??_rotary_read+2
   553     0782  0C72               	rrf	??_rotary_read+2,w
   554     0783  3901               	andlw	1
   555     0784  00F3               	movwf	??_rotary_read+3
   556     0785  01F4               	clrf	??_rotary_read+4
   557     0786  0871               	movf	??_rotary_read+1,w
   558     0787  0674               	xorwf	??_rotary_read+4,w
   559     0788  1D03               	skipz
   560     0789  2F8C               	goto	u135
   561     078A  0870               	movf	??_rotary_read,w
   562     078B  0673               	xorwf	??_rotary_read+3,w
   563     078C                     u135:
   564     078C  1903               	skipnz
   565     078D  2F8F               	goto	u131
   566     078E  2F90               	goto	u130
   567     078F                     u131:
   568     078F  2FAD               	goto	l689
   569     0790                     u130:
   570     0790                     l685:
   571                           
   572                           ;newmain.c: 91:             {;newmain.c: 92:             rotary->counter++;
   573     0790  0875               	movf	rotary_read@rotary,w
   574     0791  3E04               	addlw	4
   575     0792  0084               	movwf	4
   576     0793  3001               	movlw	1
   577     0794  0780               	addwf	0,f
   578     0795  0A84               	incf	4,f
   579     0796  1803               	skipnc
   580     0797  0A80               	incf	0,f
   581                           
   582                           ;newmain.c: 93:             if (rotary->counter % 2 != 0)
   583     0798  0875               	movf	rotary_read@rotary,w
   584     0799  3E04               	addlw	4
   585     079A  0084               	movwf	4
   586     079B  0800               	movf	0,w
   587     079C  00F0               	movwf	??_rotary_read
   588     079D  0A84               	incf	4,f
   589     079E  0800               	movf	0,w
   590     079F  00F1               	movwf	??_rotary_read+1
   591     07A0  1C70               	btfss	??_rotary_read,0
   592     07A1  2FA3               	goto	u141
   593     07A2  2FA4               	goto	u140
   594     07A3                     u141:
   595     07A3  2FEB               	goto	l697
   596     07A4                     u140:
   597     07A4                     l687:
   598                           
   599                           ;newmain.c: 94:                 rotary->oddcounter++;
   600     07A4  0875               	movf	rotary_read@rotary,w
   601     07A5  3E06               	addlw	6
   602     07A6  0084               	movwf	4
   603     07A7  3001               	movlw	1
   604     07A8  0780               	addwf	0,f
   605     07A9  0A84               	incf	4,f
   606     07AA  1803               	skipnc
   607     07AB  0A80               	incf	0,f
   608     07AC  2FEB               	goto	l697
   609     07AD                     l689:
   610     07AD  0875               	movf	rotary_read@rotary,w
   611     07AE  3E02               	addlw	2
   612     07AF  0084               	movwf	4
   613     07B0  0800               	movf	0,w
   614     07B1  00F0               	movwf	??_rotary_read
   615     07B2  0A84               	incf	4,f
   616     07B3  0800               	movf	0,w
   617     07B4  00F1               	movwf	??_rotary_read+1
   618     07B5  0E06               	swapf	6,w	;volatile
   619     07B6  3901               	andlw	1
   620     07B7  00F2               	movwf	??_rotary_read+2
   621     07B8  01F3               	clrf	??_rotary_read+3
   622     07B9  0871               	movf	??_rotary_read+1,w
   623     07BA  0673               	xorwf	??_rotary_read+3,w
   624     07BB  1D03               	skipz
   625     07BC  2FBF               	goto	u155
   626     07BD  0870               	movf	??_rotary_read,w
   627     07BE  0672               	xorwf	??_rotary_read+2,w
   628     07BF                     u155:
   629     07BF  1D03               	skipz
   630     07C0  2FC2               	goto	u151
   631     07C1  2FC3               	goto	u150
   632     07C2                     u151:
   633     07C2  2FEB               	goto	l697
   634     07C3                     u150:
   635     07C3                     l691:
   636                           
   637                           ;newmain.c: 97:             {;newmain.c: 98:             rotary->counter--;
   638     07C3  0875               	movf	rotary_read@rotary,w
   639     07C4  3E04               	addlw	4
   640     07C5  0084               	movwf	4
   641     07C6  30FF               	movlw	255
   642     07C7  0780               	addwf	0,f
   643     07C8  0F84               	incfsz	4,f
   644     07C9  0800               	movf	0,w
   645     07CA  1803               	skipnc
   646     07CB  0A00               	incf	0,w
   647     07CC  00FF               	movwf	btemp+1
   648     07CD  30FF               	movlw	255
   649     07CE  077F               	addwf	btemp+1,w
   650     07CF  0080               	movwf	0
   651     07D0  0384               	decf	4,f
   652     07D1                     l693:
   653                           
   654                           ;newmain.c: 99:             if (rotary->counter % 2 != 0)
   655     07D1  0875               	movf	rotary_read@rotary,w
   656     07D2  3E04               	addlw	4
   657     07D3  0084               	movwf	4
   658     07D4  0800               	movf	0,w
   659     07D5  00F0               	movwf	??_rotary_read
   660     07D6  0A84               	incf	4,f
   661     07D7  0800               	movf	0,w
   662     07D8  00F1               	movwf	??_rotary_read+1
   663     07D9  1C70               	btfss	??_rotary_read,0
   664     07DA  2FDC               	goto	u161
   665     07DB  2FDD               	goto	u160
   666     07DC                     u161:
   667     07DC  2FEB               	goto	l697
   668     07DD                     u160:
   669     07DD                     l695:
   670                           
   671                           ;newmain.c: 100:                 rotary->oddcounter--;
   672     07DD  0875               	movf	rotary_read@rotary,w
   673     07DE  3E06               	addlw	6
   674     07DF  0084               	movwf	4
   675     07E0  30FF               	movlw	255
   676     07E1  0780               	addwf	0,f
   677     07E2  0F84               	incfsz	4,f
   678     07E3  0800               	movf	0,w
   679     07E4  1803               	skipnc
   680     07E5  0A00               	incf	0,w
   681     07E6  00FF               	movwf	btemp+1
   682     07E7  30FF               	movlw	255
   683     07E8  077F               	addwf	btemp+1,w
   684     07E9  0080               	movwf	0
   685     07EA  0384               	decf	4,f
   686     07EB                     l697:
   687                           
   688                           ;newmain.c: 102:         if (rotary->oddcounter < 0)
   689     07EB  0875               	movf	rotary_read@rotary,w
   690     07EC  3E06               	addlw	6
   691     07ED  0084               	movwf	4
   692     07EE  0A84               	incf	4,f
   693     07EF  1F80               	btfss	0,7
   694     07F0  2FF2               	goto	u171
   695     07F1  2FF3               	goto	u170
   696     07F2                     u171:
   697     07F2  2FFB               	goto	l43
   698     07F3                     u170:
   699     07F3                     l699:
   700                           
   701                           ;newmain.c: 103:             {;newmain.c: 104:             rotary->oddcounter = (4 - 1);
   702     07F3  0875               	movf	rotary_read@rotary,w
   703     07F4  3E06               	addlw	6
   704     07F5  0084               	movwf	4
   705     07F6  3003               	movlw	3
   706     07F7  0080               	movwf	0
   707     07F8  0A84               	incf	4,f
   708     07F9  3000               	movlw	0
   709     07FA  0080               	movwf	0
   710     07FB                     l43:
   711     07FB  0008               	return
   712     07FC                     __end_of_rotary_read:
   713                           
   714                           	psect	text2
   715     06E1                     __ptext2:	
   716 ;; *************** function _pic_init *****************
   717 ;; Defined at:
   718 ;;		line 113 in file "newmain.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, pclath, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   732 ;;      Params:         0       0       0       0       0
   733 ;;      Locals:         0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0
   735 ;;      Totals:         0       0       0       0       0
   736 ;;Total ram usage:        0 bytes
   737 ;; Hardware stack levels used: 1
   738 ;; Hardware stack levels required when called: 1
   739 ;; This function calls:
   740 ;;		_init_gpio
   741 ;;		_init_osc
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747     06E1                     _pic_init:	
   748                           ;psect for function _pic_init
   749                           
   750     06E1                     l677:	
   751                           ;incstack = 0
   752                           ; Regs used in _pic_init: [wreg+status,2+status,0+pclath+cstack]
   753                           
   754                           
   755                           ;newmain.c: 115:     init_osc();
   756     06E1  120A  118A  26D4  120A  118A  	fcall	_init_osc
   757     06E6                     l679:
   758                           
   759                           ;newmain.c: 116:     init_gpio();
   760     06E6  120A  118A  26CA  120A  118A  	fcall	_init_gpio
   761                           
   762                           ;newmain.c: 117:     PORTA = 0b1111;
   763     06EB  300F               	movlw	15
   764     06EC  1283               	bcf	3,5	;RP0=0, select bank0
   765     06ED  1303               	bcf	3,6	;RP1=0, select bank0
   766     06EE  0085               	movwf	5	;volatile
   767     06EF                     l46:
   768     06EF  0008               	return
   769     06F0                     __end_of_pic_init:
   770                           
   771                           	psect	text3
   772     06D4                     __ptext3:	
   773 ;; *************** function _init_osc *****************
   774 ;; Defined at:
   775 ;;		line 131 in file "newmain.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;		None
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg, status,2, status,0
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   789 ;;      Params:         0       0       0       0       0
   790 ;;      Locals:         0       0       0       0       0
   791 ;;      Temps:          0       0       0       0       0
   792 ;;      Totals:         0       0       0       0       0
   793 ;;Total ram usage:        0 bytes
   794 ;; Hardware stack levels used: 1
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_pic_init
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802     06D4                     _init_osc:	
   803                           ;psect for function _init_osc
   804                           
   805     06D4                     l665:	
   806                           ;incstack = 0
   807                           ; Regs used in _init_osc: [wreg+status,2+status,0]
   808                           
   809                           
   810                           ;newmain.c: 135:     OSCCONbits.SCS = 0b1;
   811     06D4  1683               	bsf	3,5	;RP0=1, select bank1
   812     06D5  1303               	bcf	3,6	;RP1=0, select bank1
   813     06D6  140F               	bsf	15,0	;volatile
   814     06D7                     l667:
   815                           
   816                           ;newmain.c: 137:     OSCCONbits.IRCF = 0b011;
   817     06D7  080F               	movf	15,w	;volatile
   818     06D8  398F               	andlw	-113
   819     06D9  3830               	iorlw	48
   820     06DA  008F               	movwf	15	;volatile
   821     06DB                     l669:
   822                           
   823                           ;newmain.c: 138:     OSCCONbits.OSTS = 0b1;
   824     06DB  158F               	bsf	15,3	;volatile
   825     06DC                     l52:	
   826                           ;newmain.c: 139:     while (OSCCONbits.HTS != 0b1);
   827                           
   828     06DC  1D0F               	btfss	15,2	;volatile
   829     06DD  2EDF               	goto	u111
   830     06DE  2EE0               	goto	u110
   831     06DF                     u111:
   832     06DF  2EDC               	goto	l52
   833     06E0                     u110:
   834     06E0                     l55:
   835     06E0  0008               	return
   836     06E1                     __end_of_init_osc:
   837                           
   838                           	psect	text4
   839     06CA                     __ptext4:	
   840 ;; *************** function _init_gpio *****************
   841 ;; Defined at:
   842 ;;		line 121 in file "newmain.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		status,2
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   856 ;;      Params:         0       0       0       0       0
   857 ;;      Locals:         0       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0
   859 ;;      Totals:         0       0       0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used: 1
   862 ;; This function calls:
   863 ;;		Nothing
   864 ;; This function is called by:
   865 ;;		_pic_init
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869     06CA                     _init_gpio:	
   870                           ;psect for function _init_gpio
   871                           
   872     06CA                     l671:	
   873                           ;incstack = 0
   874                           ; Regs used in _init_gpio: [status,2]
   875                           
   876                           
   877                           ;newmain.c: 123:     TRISA = 0;
   878     06CA  1683               	bsf	3,5	;RP0=1, select bank1
   879     06CB  1303               	bcf	3,6	;RP1=0, select bank1
   880     06CC  0185               	clrf	5	;volatile
   881     06CD                     l673:
   882                           
   883                           ;newmain.c: 124:     TRISBbits.TRISB4 = 1;
   884     06CD  1606               	bsf	6,4	;volatile
   885     06CE                     l675:
   886                           
   887                           ;newmain.c: 125:     TRISBbits.TRISB5 = 1;
   888     06CE  1686               	bsf	6,5	;volatile
   889                           
   890                           ;newmain.c: 126:     ANSEL = 0;
   891     06CF  1683               	bsf	3,5	;RP0=1, select bank3
   892     06D0  1703               	bsf	3,6	;RP1=1, select bank3
   893     06D1  0188               	clrf	8	;volatile
   894                           
   895                           ;newmain.c: 127:     ANSELH = 0;
   896     06D2  0189               	clrf	9	;volatile
   897     06D3                     l49:
   898     06D3  0008               	return
   899     06D4                     __end_of_init_gpio:
   900     007E                     btemp	set	126	;btemp
   901     007E                     wtemp0	set	126
   902                           
   903                           	psect	config
   904                           
   905                           ;Config register CONFIG1 @ 0x2007
   906                           ;	Oscillator Selection bits
   907                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   908                           ;	Watchdog Timer Enable bit
   909                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   910                           ;	Power-up Timer Enable bit
   911                           ;	PWRTE = ON, PWRT enabled
   912                           ;	RE3/MCLR pin function select bit
   913                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   914                           ;	Code Protection bit
   915                           ;	CP = OFF, Program memory code protection is disabled
   916                           ;	Data Code Protection bit
   917                           ;	CPD = OFF, Data memory code protection is disabled
   918                           ;	Brown Out Reset Selection bits
   919                           ;	BOREN = ON, BOR enabled
   920                           ;	Internal External Switchover bit
   921                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   922                           ;	Fail-Safe Clock Monitor Enabled bit
   923                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   924                           ;	Low Voltage Programming Enable bit
   925                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   926                           ;	In-Circuit Debugger Mode bit
   927                           ;	DEBUG = 0x1, unprogrammed default
   928     2007                     	org	8199
   929     2007  23C4               	dw	9156
   930                           
   931                           ;Config register CONFIG2 @ 0x2008
   932                           ;	Brown-out Reset Selection bit
   933                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   934                           ;	Flash Program Memory Self Write Enable bits
   935                           ;	WRT = OFF, Write protection off
   936     2008                     	org	8200
   937     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      8       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    rotary_read@rotary	PTR struct _rot size(1) Largest target is 8
		 -> main@rotary(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_rotary_read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0     551
                                              6 COMMON     2     2      0
                                              0 BANK0      8     8      0
                           _pic_init
                        _rotary_read
 ---------------------------------------------------------------------------------
 (1) _rotary_read                                          6     6      0     297
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _pic_init                                             0     0      0       0
                          _init_gpio
                           _init_osc
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_gpio                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pic_init
     _init_gpio
     _init_osc
   _rotary_read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8       8       5       10.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Oct  3 13:17:26 2023

                     l43 07FB                       l52 06DC                       l46 06EF  
                     l55 06E0                       l49 06D3              _rotary_read 075B  
                    l701 06F0                      l711 06FF                      l703 06F5  
                    l721 072B                      l713 0707                      l705 06F9  
                    l723 0730                      l715 0711                      l707 06FB  
                    l725 073F                      l717 0717                      l709 06FD  
                    l671 06CA                      l727 0744                      l719 071D  
                    l673 06CD                      l665 06D4                      l681 075C  
                    l729 0753                      l675 06CE                      l667 06D7  
                    l691 07C3                      l683 0776                      l669 06DB  
                    l677 06E1                      l693 07D1                      l685 0790  
                    l679 06E6                      l695 07DD                      l687 07A4  
                    l697 07EB                      l689 07AD                      l699 07F3  
                    u110 06E0                      u111 06DF                      u120 0776  
                    u200 0753                      u121 0775                      u201 0752  
                    u130 0790                      u131 078F                      u140 07A4  
                    u141 07A3                      u125 0772                      u205 074F  
                    u150 07C3                      u151 07C2                      u135 078C  
                    u160 07DD                      u161 07DC                      u217 072D  
                    u170 07F3                      u171 07F2                      u155 07BF  
                    u227 0741                      u184 0723                      u185 0721  
                    u194 0738                      u195 0736                      fsr0 0004  
                    indf 0000                     _main 06F0                     btemp 007E  
                   start 0000                    ?_main 0070                    _ANSEL 0188  
                  _PORTA 0005                    _TRISA 0085                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 075B  
                 ??_main 0076                   _ANSELH 0189         __end_of_init_osc 06E1  
       __end_of_pic_init 06F0  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           ?_rotary_read 0070               __pmaintext 06F0                ?_init_osc 0070  
              ?_pic_init 0070                  __ptext1 075B                  __ptext2 06E1  
                __ptext3 06D4                  __ptext4 06CA        __end_of_init_gpio 06D4  
   end_of_initialization 07FC               ??_init_osc 0070               ??_pic_init 0070  
              _PORTBbits 0006                _TRISBbits 0086               main@rotary 0020  
    start_initialization 07FC                ___latbits 0002            __pcstackBANK0 0020  
              _init_gpio 06CA               ?_init_gpio 0070        rotary_read@rotary 0075  
          ??_rotary_read 0070                 _init_osc 06D4                 _pic_init 06E1  
    __end_of_rotary_read 07FC              ??_init_gpio 0070               _OSCCONbits 008F  
